<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_cowpoke</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>FakeSongRandomArrowTimeline</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for hit or miss.

with(obj_arrow)
{
    if(hit_or_missed) {
        x += 100000;
    }
}

var closest_arrow = instance_nearest(x, y, obj_arrow);

with(obj_arrow)
{
    if(hit_or_missed) {
        x -= 100000;
    }
}

closest_arrow.hit_or_missed = true;

if(closest_arrow.in_hit_area) {
    hit = false;
    part_hit = false;
    
    switch(closest_arrow.image_index) {
        case C_ARROW_DOWN:
            if(keyboard_check(ord('s')) || keyboard_check(vk_down)) {
                hit = true;
            }
            break;
        case C_ARROW_DOWN_LEFT:
            if((keyboard_check(ord('s')) || keyboard_check(vk_down)) &amp;&amp; (keyboard_check(ord('a')) || keyboard_check(vk_left))) {
                hit = true;
            } else {
                if((keyboard_check(ord('s')) || keyboard_check(vk_down)) || (keyboard_check(ord('a')) || keyboard_check(vk_left))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_DOWN_RIGHT:
            if((keyboard_check(ord('s')) || keyboard_check(vk_down)) &amp;&amp; (keyboard_check(ord('d')) || keyboard_check(vk_right))) {
                hit = true;
            } else {
                if((keyboard_check(ord('s')) || keyboard_check(vk_down)) || (keyboard_check(ord('d')) || keyboard_check(vk_right))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_LEFT:
            if(keyboard_check(ord('a')) || keyboard_check(vk_left)) {
                hit = true;
            }
            break;
        case C_ARROW_LEFT_DOWN:
            if((keyboard_check(ord('a')) || keyboard_check(vk_left)) &amp;&amp; (keyboard_check(ord('s')) || keyboard_check(vk_down))) {
                hit = true;
            } else {
                if((keyboard_check(ord('a')) || keyboard_check(vk_left)) || (keyboard_check(ord('s')) || keyboard_check(vk_down))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_LEFT_UP:
            if((keyboard_check(ord('a')) || keyboard_check(vk_left)) &amp;&amp; (keyboard_check(ord('w')) || keyboard_check(vk_up))) {
                hit = true;
            } else {
                if((keyboard_check(ord('a')) || keyboard_check(vk_left)) || (keyboard_check(ord('w')) || keyboard_check(vk_up))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_RIGHT:
            if(keyboard_check(ord('d')) || keyboard_check(vk_right)) {
                hit = true;
            }
            break;
        case C_ARROW_RIGHT_DOWN:
            if((keyboard_check(ord('d')) || keyboard_check(vk_right)) &amp;&amp; (keyboard_check(ord('s')) || keyboard_check(vk_down))) {
                hit = true;
            } else {
                if((keyboard_check(ord('d')) || keyboard_check(vk_right)) || (keyboard_check(ord('s')) || keyboard_check(vk_down))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_RIGHT_UP:
            if((keyboard_check(ord('d')) || keyboard_check(vk_right)) &amp;&amp; (keyboard_check(ord('w')) || keyboard_check(vk_up))) {
                hit = true;
            } else {
                if((keyboard_check(ord('d')) || keyboard_check(vk_right)) || (keyboard_check(ord('w')) || keyboard_check(vk_up))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_UP:
            if(keyboard_check(ord('w')) || keyboard_check(vk_up)) {
                hit = true;
            }
            break;
        case C_ARROW_UP_LEFT:
            if((keyboard_check(ord('w')) || keyboard_check(vk_up)) &amp;&amp; (keyboard_check(ord('a')) || keyboard_check(vk_left))) {
                hit = true;
            } else {
                if((keyboard_check(ord('w')) || keyboard_check(vk_up)) || (keyboard_check(ord('a')) || keyboard_check(vk_left))) {
                    part_hit = true;
                }
            }
            break;
        case C_ARROW_UP_RIGHT:
            if((keyboard_check(ord('w')) || keyboard_check(vk_up)) &amp;&amp; (keyboard_check(ord('d')) || keyboard_check(vk_right))) {
                hit = true;
            } else {
                if((keyboard_check(ord('w')) || keyboard_check(vk_up)) || (keyboard_check(ord('d')) || keyboard_check(vk_right))) {
                    part_hit = true;
                }
            }
            break;
    }
    
    if ( hit ) {
        scr_hit_arrow(closest_arrow);
    } else {
        if ( part_hit ) {
            // Keep going.
            closest_arrow.hit_or_missed = false;
        } else {
            scr_miss_arrow(closest_arrow);
        }
    }
} else {
    scr_miss_arrow(closest_arrow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
